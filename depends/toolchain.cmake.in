# Copyright (c) 2023-present The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://opensource.org/license/mit/.

# This file is expected to be highly volatile and may still change substantially.

# If CMAKE_SYSTEM_NAME is set within a toolchain file, CMake will also
# set CMAKE_CROSSCOMPILING to TRUE, even if CMAKE_SYSTEM_NAME matches
# CMAKE_HOST_SYSTEM_NAME. To avoid potential misconfiguration of CMake,
# it is best not to touch CMAKE_SYSTEM_NAME unless cross-compiling is
# intended.
if(@depends_crosscompiling@)
  set(CMAKE_SYSTEM_NAME @host_system_name@)
  set(CMAKE_SYSTEM_VERSION @host_system_version@)
  set(CMAKE_SYSTEM_PROCESSOR @host_arch@)
endif()

function(split_compiler_launcher env_compiler launcher compiler)
  set(${launcher})
  list(GET ${env_compiler} 0 start_token)
  if(start_token STREQUAL "env")
    set(${compiler})
    set(env_arg_parsing TRUE)
    foreach(token IN LISTS ${env_compiler})
      if(env_arg_parsing)
        list(APPEND ${launcher} ${token})
        set(env_arg_parsing FALSE)
        continue()
      elseif(token STREQUAL "-u")
        list(APPEND ${launcher} ${token})
        set(env_arg_parsing TRUE)
        continue()
      endif()
      list(APPEND ${compiler} ${token})
    endforeach()
  else()
    set(${compiler} ${${env_compiler}})
  endif()
  set(${launcher} ${${launcher}} PARENT_SCOPE)
  set(${compiler} ${${compiler}} PARENT_SCOPE)
endfunction()

if(NOT DEFINED CMAKE_C_FLAGS_INIT)
  set(CMAKE_C_FLAGS_INIT "@CFLAGS@")
endif()
if(NOT DEFINED CMAKE_C_FLAGS_RELWITHDEBINFO_INIT)
  set(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT "@CFLAGS_RELEASE@")
endif()
if(NOT DEFINED CMAKE_C_FLAGS_DEBUG_INIT)
  set(CMAKE_C_FLAGS_DEBUG_INIT "@CFLAGS_DEBUG@")
endif()

if(NOT DEFINED CMAKE_C_COMPILER)
  set(DEPENDS_C_COMPILER_WITH_LAUNCHER @CC@)
  split_compiler_launcher(DEPENDS_C_COMPILER_WITH_LAUNCHER CMAKE_C_COMPILER_LAUNCHER CMAKE_C_COMPILER)
  set(CMAKE_C_LINKER_LAUNCHER ${CMAKE_C_COMPILER_LAUNCHER})
endif()

if(NOT DEFINED CMAKE_CXX_FLAGS_INIT)
  set(CMAKE_CXX_FLAGS_INIT "@CXXFLAGS@")
  set(CMAKE_OBJCXX_FLAGS_INIT "@CXXFLAGS@")
endif()
if(NOT DEFINED CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT)
  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "@CXXFLAGS_RELEASE@")
  set(CMAKE_OBJCXX_FLAGS_RELWITHDEBINFO_INIT "@CXXFLAGS_RELEASE@")
endif()
if(NOT DEFINED CMAKE_CXX_FLAGS_DEBUG_INIT)
  set(CMAKE_CXX_FLAGS_DEBUG_INIT "@CXXFLAGS_DEBUG@")
  set(CMAKE_OBJCXX_FLAGS_DEBUG_INIT "@CXXFLAGS_DEBUG@")
endif()

if(NOT DEFINED CMAKE_CXX_COMPILER)
  set(DEPENDS_CXX_COMPILER_WITH_LAUNCHER @CXX@)
  split_compiler_launcher(DEPENDS_CXX_COMPILER_WITH_LAUNCHER CMAKE_CXX_COMPILER_LAUNCHER CMAKE_CXX_COMPILER)
  set(CMAKE_CXX_LINKER_LAUNCHER ${CMAKE_CXX_COMPILER_LAUNCHER})

  set(CMAKE_OBJCXX_COMPILER ${CMAKE_CXX_COMPILER})
  set(CMAKE_OBJCXX_COMPILER_LAUNCHER ${CMAKE_CXX_COMPILER_LAUNCHER})
  set(CMAKE_OBJCXX_LINKER_LAUNCHER ${CMAKE_CXX_LINKER_LAUNCHER})
endif()

# The DEPENDS_COMPILE_DEFINITIONS* variables are to be treated as lists.
set(DEPENDS_COMPILE_DEFINITIONS @CPPFLAGS@)
set(DEPENDS_COMPILE_DEFINITIONS_RELWITHDEBINFO @CPPFLAGS_RELEASE@)
set(DEPENDS_COMPILE_DEFINITIONS_DEBUG @CPPFLAGS_DEBUG@)

if(NOT DEFINED CMAKE_EXE_LINKER_FLAGS_INIT)
  set(CMAKE_EXE_LINKER_FLAGS_INIT "@LDFLAGS@")
endif()
if(NOT DEFINED CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO_INIT)
  set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO_INIT "@LDFLAGS_RELEASE@")
endif()
if(NOT DEFINED CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT)
  set(CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT "@LDFLAGS_DEBUG@")
endif()

set(CMAKE_AR "@AR@")
set(CMAKE_RANLIB "@RANLIB@")
set(CMAKE_STRIP "@STRIP@")
set(CMAKE_OBJCOPY "@OBJCOPY@")
set(CMAKE_OBJDUMP "@OBJDUMP@")

# Using our own built dependencies should not be
# affected by a potentially random environment.
set(CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH OFF)

set(CMAKE_FIND_ROOT_PATH "@depends_prefix@")
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(QT_TRANSLATIONS_DIR "@depends_prefix@/translations")

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND NOT CMAKE_HOST_APPLE)
  # The find_package(Qt ...) function internally uses find_library()
  # calls for all dependencies to ensure their availability.
  # In turn, the find_library() inspects the well-known locations
  # on the file system; therefore, a hint is required.
  set(CMAKE_FRAMEWORK_PATH "@OSX_SDK@/System/Library/Frameworks")
endif()


# Customize pkg-config behaviour.
cmake_path(APPEND CMAKE_FIND_ROOT_PATH "lib" "pkgconfig" OUTPUT_VARIABLE pkg_config_path)
set(ENV{PKG_CONFIG_PATH} ${pkg_config_path})
set(ENV{PKG_CONFIG_LIBDIR} ${pkg_config_path})
unset(pkg_config_path)
set(PKG_CONFIG_ARGN --static)


# Set configuration options for the main build system.
if("@no_qt@")
  set(BUILD_GUI OFF CACHE BOOL "")
else()
  set(BUILD_GUI ON CACHE BOOL "")
endif()

if(NOT WITH_QRENCODE AND "@no_qr@" STREQUAL "1")
  set(WITH_QRENCODE OFF CACHE STRING "Enable QR code support.")
endif()

if("@no_zmq@")
  set(WITH_ZMQ OFF CACHE BOOL "")
else()
  set(WITH_ZMQ ON CACHE BOOL "")
endif()

if("@no_wallet@")
  set(ENABLE_WALLET OFF CACHE BOOL "")
else()
  set(ENABLE_WALLET ON CACHE BOOL "")
endif()

if("@no_wallet@" OR "@no_bdb@")
  set(WITH_BDB OFF CACHE BOOL "")
else()
  set(WITH_BDB ON CACHE BOOL "")
endif()

if("@no_wallet@" OR "@no_sqlite@")
  set(WITH_SQLITE OFF CACHE BOOL "")
else()
  set(WITH_SQLITE ON CACHE BOOL "")
endif()

if("@no_upnp@")
  set(WITH_MINIUPNPC OFF CACHE BOOL "")
else()
  set(WITH_MINIUPNPC ON CACHE BOOL "")
endif()

if("@no_natpmp@")
  set(WITH_NATPMP OFF CACHE BOOL "")
else()
  set(WITH_NATPMP ON CACHE BOOL "")
endif()

if("@usdt_packages@" STREQUAL "")
  set(WITH_USDT OFF CACHE BOOL "")
else()
  set(WITH_USDT ON CACHE BOOL "")
endif()

if("@no_harden@")
  set(ENABLE_HARDENING OFF CACHE BOOL "")
else()
  set(ENABLE_HARDENING ON CACHE BOOL "")
endif()

if("@multiprocess@" STREQUAL "1")
  set(WITH_MULTIPROCESS ON CACHE BOOL "")
  set(LibmultiprocessGen_DIR "${CMAKE_FIND_ROOT_PATH}/native/lib/cmake/LibmultiprocessGen" CACHE PATH "")
else()
  set(WITH_MULTIPROCESS OFF CACHE BOOL "")
endif()
